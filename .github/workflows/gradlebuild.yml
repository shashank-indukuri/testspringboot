#Workflow name
name: Test Spring Boot CI/CD Pipeline
on: [push]
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu os using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v3
      #Set up JDK 17
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      #Cache Gradle
      - name: Cache Gradle packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-
      #Run Tests
      - name: Run Tests
        run: ./gradlew check
  #Build's job
  build:
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v3
      #Set up JDK 17
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      # Build the application with Gradle
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
      #Upload the build file
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v3
        with:
          #Set artifact name
          name: build-artifact
          #From this paths
          path: build/libs/testspringboot-0.0.1-SNAPSHOT.jar
  #Deploy's job
  deploy:
    #Depends on build's job
    needs: build
    name: Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Download JAR file
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
      #Deploy to Heroku
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "test-spring-boot-cicd" #Must be unique in Heroku
          heroku_email: "shashank.indukuri05@gmail.com"
